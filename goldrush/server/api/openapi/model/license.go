// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// License License for digging.
//
// swagger:model license
type License struct {

	// id
	// Required: true
	ID *int64 `json:"id"`

	// dig allowed
	// Required: true
	DigAllowed Amount `json:"digAllowed"`

	// dig used
	// Required: true
	DigUsed Amount `json:"digUsed"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *License) UnmarshalJSON(data []byte) error {
	var props struct {

		// id
		// Required: true
		ID *int64 `json:"id"`

		// dig allowed
		// Required: true
		DigAllowed Amount `json:"digAllowed"`

		// dig used
		// Required: true
		DigUsed Amount `json:"digUsed"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.ID = props.ID
	m.DigAllowed = props.DigAllowed
	m.DigUsed = props.DigUsed
	return nil
}

// Validate validates this license
func (m *License) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDigAllowed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDigUsed(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *License) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *License) validateDigAllowed(formats strfmt.Registry) error {

	if err := m.DigAllowed.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("digAllowed")
		}
		return err
	}

	return nil
}

func (m *License) validateDigUsed(formats strfmt.Registry) error {

	if err := m.DigUsed.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("digUsed")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *License) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *License) UnmarshalBinary(b []byte) error {
	var res License
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
