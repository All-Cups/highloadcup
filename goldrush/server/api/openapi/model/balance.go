// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Balance Current balance and wallet with up to 1000 coins.
//
// swagger:model balance
type Balance struct {

	// balance
	// Required: true
	Balance *uint32 `json:"balance"`

	// wallet
	// Required: true
	Wallet Wallet `json:"wallet"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *Balance) UnmarshalJSON(data []byte) error {
	var props struct {

		// balance
		// Required: true
		Balance *uint32 `json:"balance"`

		// wallet
		// Required: true
		Wallet Wallet `json:"wallet"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.Balance = props.Balance
	m.Wallet = props.Wallet
	return nil
}

// Validate validates this balance
func (m *Balance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWallet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Balance) validateBalance(formats strfmt.Registry) error {

	if err := validate.Required("balance", "body", m.Balance); err != nil {
		return err
	}

	return nil
}

func (m *Balance) validateWallet(formats strfmt.Registry) error {

	if err := validate.Required("wallet", "body", m.Wallet); err != nil {
		return err
	}

	if err := m.Wallet.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("wallet")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Balance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Balance) UnmarshalBinary(b []byte) error {
	var res Balance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
