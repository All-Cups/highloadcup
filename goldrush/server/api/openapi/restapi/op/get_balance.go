// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetBalanceHandlerFunc turns a function with the right signature into a get balance handler
type GetBalanceHandlerFunc func(GetBalanceParams) GetBalanceResponder

// Handle executing the request and returning a response
func (fn GetBalanceHandlerFunc) Handle(params GetBalanceParams) GetBalanceResponder {
	return fn(params)
}

// GetBalanceHandler interface for that can handle valid get balance params
type GetBalanceHandler interface {
	Handle(GetBalanceParams) GetBalanceResponder
}

// NewGetBalance creates a new http.Handler for the get balance operation
func NewGetBalance(ctx *middleware.Context, handler GetBalanceHandler) *GetBalance {
	return &GetBalance{Context: ctx, Handler: handler}
}

/*GetBalance swagger:route GET /balance getBalance

Returns a current balance.

*/
type GetBalance struct {
	Context *middleware.Context
	Handler GetBalanceHandler
}

func (o *GetBalance) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetBalanceParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
