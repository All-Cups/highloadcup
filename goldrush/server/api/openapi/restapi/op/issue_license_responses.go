// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"github.com/Djarvur/allcups-itrally-2020-task/api/openapi/model"
)

// IssueLicenseOKCode is the HTTP code returned for type IssueLicenseOK
const IssueLicenseOKCode int = 200

/*IssueLicenseOK Issued license.

swagger:response issueLicenseOK
*/
type IssueLicenseOK struct {

	/*
	  In: Body
	*/
	Payload *model.License `json:"body,omitempty"`
}

// NewIssueLicenseOK creates IssueLicenseOK with default headers values
func NewIssueLicenseOK() *IssueLicenseOK {

	return &IssueLicenseOK{}
}

// WithPayload adds the payload to the issue license o k response
func (o *IssueLicenseOK) WithPayload(payload *model.License) *IssueLicenseOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the issue license o k response
func (o *IssueLicenseOK) SetPayload(payload *model.License) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *IssueLicenseOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *IssueLicenseOK) IssueLicenseResponder() {}

/*IssueLicenseDefault - 409.1002: no more active licenses allowed


swagger:response issueLicenseDefault
*/
type IssueLicenseDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *model.Error `json:"body,omitempty"`
}

// NewIssueLicenseDefault creates IssueLicenseDefault with default headers values
func NewIssueLicenseDefault(code int) *IssueLicenseDefault {
	if code <= 0 {
		code = 500
	}

	return &IssueLicenseDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the issue license default response
func (o *IssueLicenseDefault) WithStatusCode(code int) *IssueLicenseDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the issue license default response
func (o *IssueLicenseDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the issue license default response
func (o *IssueLicenseDefault) WithPayload(payload *model.Error) *IssueLicenseDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the issue license default response
func (o *IssueLicenseDefault) SetPayload(payload *model.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *IssueLicenseDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *IssueLicenseDefault) IssueLicenseResponder() {}

type IssueLicenseNotImplementedResponder struct {
	middleware.Responder
}

func (*IssueLicenseNotImplementedResponder) IssueLicenseResponder() {}

func IssueLicenseNotImplemented() IssueLicenseResponder {
	return &IssueLicenseNotImplementedResponder{
		middleware.NotImplemented(
			"operation authentication.IssueLicense has not yet been implemented",
		),
	}
}

type IssueLicenseResponder interface {
	middleware.Responder
	IssueLicenseResponder()
}
