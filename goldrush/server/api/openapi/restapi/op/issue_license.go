// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// IssueLicenseHandlerFunc turns a function with the right signature into a issue license handler
type IssueLicenseHandlerFunc func(IssueLicenseParams) IssueLicenseResponder

// Handle executing the request and returning a response
func (fn IssueLicenseHandlerFunc) Handle(params IssueLicenseParams) IssueLicenseResponder {
	return fn(params)
}

// IssueLicenseHandler interface for that can handle valid issue license params
type IssueLicenseHandler interface {
	Handle(IssueLicenseParams) IssueLicenseResponder
}

// NewIssueLicense creates a new http.Handler for the issue license operation
func NewIssueLicense(ctx *middleware.Context, handler IssueLicenseHandler) *IssueLicense {
	return &IssueLicense{Context: ctx, Handler: handler}
}

/*IssueLicense swagger:route POST /licenses issueLicense

Issue a new license.

*/
type IssueLicense struct {
	Context *middleware.Context
	Handler IssueLicenseHandler
}

func (o *IssueLicense) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewIssueLicenseParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
