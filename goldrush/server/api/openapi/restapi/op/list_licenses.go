// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListLicensesHandlerFunc turns a function with the right signature into a list licenses handler
type ListLicensesHandlerFunc func(ListLicensesParams) ListLicensesResponder

// Handle executing the request and returning a response
func (fn ListLicensesHandlerFunc) Handle(params ListLicensesParams) ListLicensesResponder {
	return fn(params)
}

// ListLicensesHandler interface for that can handle valid list licenses params
type ListLicensesHandler interface {
	Handle(ListLicensesParams) ListLicensesResponder
}

// NewListLicenses creates a new http.Handler for the list licenses operation
func NewListLicenses(ctx *middleware.Context, handler ListLicensesHandler) *ListLicenses {
	return &ListLicenses{Context: ctx, Handler: handler}
}

/*ListLicenses swagger:route GET /licenses listLicenses

Returns a list of issued licenses.

*/
type ListLicenses struct {
	Context *middleware.Context
	Handler ListLicensesHandler
}

func (o *ListLicenses) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListLicensesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
