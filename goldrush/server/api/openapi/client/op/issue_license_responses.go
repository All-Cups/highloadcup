// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Djarvur/allcups-itrally-2020-task/api/openapi/model"
)

// IssueLicenseReader is a Reader for the IssueLicense structure.
type IssueLicenseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IssueLicenseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewIssueLicenseOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewIssueLicenseDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewIssueLicenseOK creates a IssueLicenseOK with default headers values
func NewIssueLicenseOK() *IssueLicenseOK {
	return &IssueLicenseOK{}
}

/*IssueLicenseOK handles this case with default header values.

Issued license.
*/
type IssueLicenseOK struct {
	Payload *model.License
}

func (o *IssueLicenseOK) Error() string {
	return fmt.Sprintf("[POST /licenses][%d] issueLicenseOK  %+v", 200, o.Payload)
}

func (o *IssueLicenseOK) GetPayload() *model.License {
	return o.Payload
}

func (o *IssueLicenseOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(model.License)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIssueLicenseDefault creates a IssueLicenseDefault with default headers values
func NewIssueLicenseDefault(code int) *IssueLicenseDefault {
	return &IssueLicenseDefault{
		_statusCode: code,
	}
}

/*IssueLicenseDefault handles this case with default header values.

- 409.1002: no more active licenses allowed

*/
type IssueLicenseDefault struct {
	_statusCode int

	Payload *model.Error
}

// Code gets the status code for the issue license default response
func (o *IssueLicenseDefault) Code() int {
	return o._statusCode
}

func (o *IssueLicenseDefault) Error() string {
	return fmt.Sprintf("[POST /licenses][%d] issueLicense default  %+v", o._statusCode, o.Payload)
}

func (o *IssueLicenseDefault) GetPayload() *model.Error {
	return o.Payload
}

func (o *IssueLicenseDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(model.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
