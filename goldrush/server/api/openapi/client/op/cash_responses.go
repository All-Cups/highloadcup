// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Djarvur/allcups-itrally-2020-task/api/openapi/model"
)

// CashReader is a Reader for the Cash structure.
type CashReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CashReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCashOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewCashDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCashOK creates a CashOK with default headers values
func NewCashOK() *CashOK {
	return &CashOK{}
}

/*CashOK handles this case with default header values.

Payment for treasure.
*/
type CashOK struct {
	Payload model.Wallet
}

func (o *CashOK) Error() string {
	return fmt.Sprintf("[POST /cash][%d] cashOK  %+v", 200, o.Payload)
}

func (o *CashOK) GetPayload() model.Wallet {
	return o.Payload
}

func (o *CashOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCashDefault creates a CashDefault with default headers values
func NewCashDefault(code int) *CashDefault {
	return &CashDefault{
		_statusCode: code,
	}
}

/*CashDefault handles this case with default header values.

- 409.1003: treasure is not digged

*/
type CashDefault struct {
	_statusCode int

	Payload *model.Error
}

// Code gets the status code for the cash default response
func (o *CashDefault) Code() int {
	return o._statusCode
}

func (o *CashDefault) Error() string {
	return fmt.Sprintf("[POST /cash][%d] cash default  %+v", o._statusCode, o.Payload)
}

func (o *CashDefault) GetPayload() *model.Error {
	return o.Payload
}

func (o *CashDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(model.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
