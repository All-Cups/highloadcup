// Code generated by MockGen. DO NOT EDIT.
// Source: game.go

// Package game is a generated GoMock package.
package game

import (
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockGame is a mock of Game interface
type MockGame struct {
	ctrl     *gomock.Controller
	recorder *MockGameMockRecorder
}

// MockGameMockRecorder is the mock recorder for MockGame
type MockGameMockRecorder struct {
	mock *MockGame
}

// NewMockGame creates a new mock instance
func NewMockGame(ctrl *gomock.Controller) *MockGame {
	mock := &MockGame{ctrl: ctrl}
	mock.recorder = &MockGameMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGame) EXPECT() *MockGameMockRecorder {
	return m.recorder
}

// WriteTo mocks base method
func (m *MockGame) WriteTo(w io.Writer) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteTo", w)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteTo indicates an expected call of WriteTo
func (mr *MockGameMockRecorder) WriteTo(w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteTo", reflect.TypeOf((*MockGame)(nil).WriteTo), w)
}

// Balance mocks base method
func (m *MockGame) Balance() (int, []int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Balance")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]int)
	return ret0, ret1
}

// Balance indicates an expected call of Balance
func (mr *MockGameMockRecorder) Balance() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Balance", reflect.TypeOf((*MockGame)(nil).Balance))
}

// Licenses mocks base method
func (m *MockGame) Licenses() []License {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Licenses")
	ret0, _ := ret[0].([]License)
	return ret0
}

// Licenses indicates an expected call of Licenses
func (mr *MockGameMockRecorder) Licenses() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Licenses", reflect.TypeOf((*MockGame)(nil).Licenses))
}

// IssueLicense mocks base method
func (m *MockGame) IssueLicense(wallet []int) (License, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueLicense", wallet)
	ret0, _ := ret[0].(License)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueLicense indicates an expected call of IssueLicense
func (mr *MockGameMockRecorder) IssueLicense(wallet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueLicense", reflect.TypeOf((*MockGame)(nil).IssueLicense), wallet)
}

// CountTreasures mocks base method
func (m *MockGame) CountTreasures(area Area, depth uint8) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountTreasures", area, depth)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountTreasures indicates an expected call of CountTreasures
func (mr *MockGameMockRecorder) CountTreasures(area, depth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountTreasures", reflect.TypeOf((*MockGame)(nil).CountTreasures), area, depth)
}

// Dig mocks base method
func (m *MockGame) Dig(licenseID int, pos Coord) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dig", licenseID, pos)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dig indicates an expected call of Dig
func (mr *MockGameMockRecorder) Dig(licenseID, pos interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dig", reflect.TypeOf((*MockGame)(nil).Dig), licenseID, pos)
}

// Cash mocks base method
func (m *MockGame) Cash(pos Coord) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cash", pos)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cash indicates an expected call of Cash
func (mr *MockGameMockRecorder) Cash(pos interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cash", reflect.TypeOf((*MockGame)(nil).Cash), pos)
}
